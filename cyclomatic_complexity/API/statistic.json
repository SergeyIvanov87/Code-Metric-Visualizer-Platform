{
    "Content-Type" : "application/xml",
    "Method" : "GET",
    "Query": "api.pmccabe_collector.restapi.org/cc/statistic",
    "Params": {
        "watch_list" : {
            "-regex": "\".*\\.\\(hpp\\|cpp\\|c\\|h\\)\"",
            "-prune": "! -path \"*buil*\" ! -path \"*thirdpart*\""
        },
        "-mmcc" : "1,",
        "-tmcc" : "1,",
        "-sif" : "1,",
        "-lif" : "1,"
    },
    "Description": {
        "header": "Apply filters to exclude all functions and modules which metric values are resided outside the range of values described in arguments of this query.\n\n`-mmcc` stands for 'Modified McCabe Cyclomatic Complexity'\n\n`-tmcc` - 'Traditional McCabe Cyclomatic Complexity'\n\n`-sif` - 'Statements in function'\n\n`-lif` - 'lines in function'\n\nDefault range (1,*) admits all functions/methods/components for putting them into a final statistic report, regardless which metric value they have. To focus your interest onto significantly large functions or components, you may apply limits filters narrowing statistic generation for particular range only.\nTypical usecase for a large project is to shift points of interest onto inflated functions, determined by the ranges `-mmcc 10,3000` and `-lif 10,*` for example.\n\nPlease don't hesitate to find the best matches for your project.",
        "body": "To make a query:\n\n`echo \"0\" > api.pmccabe_collector.restapi.org/cc/statistic/GET/exec`\n\nTo wait and extract the query result:\n\n`cat api.pmccabe_collector.restapi.org/cc/statistic/GET/result.xml > <your_filename>.xml`\n\n",
        "footer": "The generated result of this command represents a XML report, which describes a hierarchical structure of the project and is not intended for observations rather than parsing it by some automation tools for further governance.\n\nThe report structure is pretty straightforward: each XML node represents a `package`, which is ,actually, a directory incorporating other directories and modules (source code files) of the project tree.\n\nThe leaf nodes of that XML structure are functions/methods, which were recognized by the cyclomatic complexity analyzer (`man pmccabe` for C/C++ code).\nEach leaf node is supplemented by evaluated values of `mmcc`, `tmcc`, `sif`, `lif` metrics while those values belong to the requested intervals passed through the query parameters. If the function/method doesn't match the query ranges criteria then it must be skipped.\n\nIntermediate nodes of that XML tree incorporates IDs of the leaf nodes followed by its metric values list (the leaf node redundancy) and enumerated under the `<params>` subnode. Additionally, each intermediate node carries a `<statistic>` subnode which represented `<mean>`,`<median>` and `<deviation>` lists of `mmcc`,`tmcc`,`sif` & `lif` respectively. This statistic is collected and evaluated as aggregated metric of all child nodes belong this current node and might as well be used for governance and quality analysis."
    }
}
