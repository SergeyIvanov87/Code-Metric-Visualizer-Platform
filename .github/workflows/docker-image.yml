name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  unit_testing:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
    - name: Execute unit tests
      run: docker compose -f common/images/unit_test/compose.yaml up --exit-code-from unit_tests

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
    - name: Build the VCS Docker image
      run: docker build -f observable_project_version_control/Dockerfile -t vcs_project:$DATE .
      env:
        DATE: ${{ steps.date.outputs.date }}
    - name: Build the CC Docker image
      run: docker build -f cyclomatic_complexity/Dockerfile --tag cc_visualizer:$DATE .
      env:
        DATE: ${{ steps.date.outputs.date }}
    - name: Test the CC Docker image
      run: docker compose -f cyclomatic_complexity/compose-functional.test.yaml up --abort-on-container-exit --exit-code-from cc_functional_tester
    - name: Build the RRD Docker image
      run: docker build -f rrd/Dockerfile --tag rrd_analytic:$DATE .
      env:
        DATE: ${{ steps.date.outputs.date }}
    - name: Test the RRD Docker image
      run: docker compose -f rrd/compose-functional.test.yaml up --abort-on-container-exit --exit-code-from rrd_functional_tester
    - name: Build the REST API Docker image
      run: docker build -f rest_api/Dockerfile --tag rest_api:$DATE .
      env:
        DATE: ${{ steps.date.outputs.date }}
    - name: Test the REST API Docker image
      run: docker compose -f rest_api/compose-functional.test.yaml up --abort-on-container-exit --exit-code-from rest_api_functional_service_tester

    - name: Build the HTTP_FS API PROXY Docker image
      run: docker build -f fs_api_proxy/http_proxy/Dockerfile --tag fs_api_proxy_http:$DATE .
      env:
        DATE: ${{ steps.date.outputs.date }}
    - name: Test the HTTP_FS API PROXY Docker image
      run: docker compose -f fs_api_proxy/http_proxy/compose-functional.test.yaml up --abort-on-container-exit --exit-code-from fs_api_http_proxy_functional_tester_service_a

    - name: Build the Service Broker Docker image
      run: docker build -f service_broker/Dockerfile -t service_broker:$DATE .
      env:
        DATE: ${{ steps.date.outputs.date }}
    - name: Test the Service Broker Docker image
      run: docker compose -f service_broker/compose-functional.test.yaml up --abort-on-container-exit --exit-code-from service_broker_functional_tester
    - name: Create API volume
      run: mkdir -p api && chmod 777 api && docker volume create -d local -o type=none -o device=api -o o=bind api.pmccabe_collector.restapi.org
    - name: Run VCS Docker
      run: docker run -d --name vcs_project -v "api:/api" -e PROJECT_URL=https://github.com/SergeyIvanov87/TrafficInspector.git -e PROJECT_BRANCH=master vcs_project:$DATE
      env:
        DATE: ${{ steps.date.outputs.date }}
    - name: Run CC Docker
      run: docker run -d --name cc_visualizer -v "api:/api" --volumes-from vcs_project cc_visualizer:$DATE
      env:
        DATE: ${{ steps.date.outputs.date }}
    - name: Create RRD volume
      run: mkdir -p rrd_data && chmod 777 rrd_data && docker volume create -d local -o type=none -o device=rrd_data -o o=bind api.pmccabe_collector.rrd_analytic
    - name: Run RRD Docker
      run: docker run -d --name rrd_analytic -v "api:/api" -v "rrd_data:/rrd_data" --volumes-from cc_visualizer rrd_analytic:$DATE
      env:
        DATE: ${{ steps.date.outputs.date }}
    - name: Run REST Docker
      run: docker run -d --name rest_api -v "api:/api" -e FLASK_RUN_PORT=5000 -e FLASK_RUN_HOST=0.0.0.0 --volumes-from cc_visualizer -p 5000:5000 rest_api:$DATE
      env:
        DATE: ${{ steps.date.outputs.date }}
    - name: Run Broker Docker
      run: docker run -d --name service_broker --volumes-from vcs_project -e CRON_REPO_UPDATE_SCHEDULE="0 0 * * *" service_broker:$DATE
      env:
        DATE: ${{ steps.date.outputs.date }}
    - name: Stop Standalone Containers
      run: docker stop vcs_project cc_visualizer rrd_analytic rest_api service_broker
    - name: Check filesystem API artefacts
      run: ARTEFACTS=`find api/ -regex ".*\(GET\|PUT\|POST\)/\(result.*\|exec\)"` && if [ "${ARTEFACTS}" != "" ]; then echo "${ARTEFACTS}" && exit -1; fi


  functional_tests_all_isolated_microservices:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
    - name: Create Shared network
      run: docker network create -d bridge api.pmccabe_collector.network
    - name: Prepare shared volume for SYSLOG-NG
      run: mkdir -p ${GITHUB_WORKSPACE}/log && chmod 777 ${GITHUB_WORKSPACE}/log && docker volume create -d local -o type=none -o device=${GITHUB_WORKSPACE}/log -o o=bind api.pmccabe_collector.logger.org
    - name: All together functional tests
      run: docker compose -f compose-functional.test.yaml up --abort-on-container-exit --exit-code-from test_aggregator && if [ $? != 0 ]; then cat ${GITHUB_WORKSPACE}/log/messages && exit -1; fi

  analysis_use-case:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
    - name: Create API volume
      run: mkdir -p ${GITHUB_WORKSPACE}/api && chmod 777 ${GITHUB_WORKSPACE}/api && docker volume create -d local -o type=none -o device=${GITHUB_WORKSPACE}/api -o o=bind api.pmccabe_collector.restapi.org
    - name: Create Shared network
      run: docker network create -d bridge api.pmccabe_collector.network
    - name: Clone external C/C++ project
      run: git clone https://github.com/SergeyIvanov87/MRUVocabulary.git $GITHUB_WORKSPACE/MRUVocabulary
    - name: Prepare shared volume for SYSLOG-NG
      run: mkdir -p ${GITHUB_WORKSPACE}/log && chmod 777 ${GITHUB_WORKSPACE}/log && docker volume create -d local -o type=none -o device=${GITHUB_WORKSPACE}/log -o o=bind api.pmccabe_collector.logger.org
    - name: Tryout SYSLOG-NG
      run: docker compose -f common/images/syslog-ng_image/compose.yaml up -d
    - name: Start Analysis UC
      run: PROJECT_PATH=${GITHUB_WORKSPACE}/MRUVocabulary docker compose -f compose-analysis.yaml up -d
    - name: Start Integrational Tests on running Analysis UC
      run: sleep 5 && docker compose -f compose-analysis.integrational-test.yaml up --abort-on-container-exit --exit-code-from test_aggregator && if [ $? != 0 ]; then echo "Collected Logs:" && cat ${GITHUB_WORKSPACE}/log/messages && exit -1; fi
    - name: Start Integrational Tests on running Analysis UC one more time
      run: docker compose -f compose-analysis.integrational-test.yaml up --abort-on-container-exit --exit-code-from test_aggregator && if [ $? != 0 ]; then cat ${GITHUB_WORKSPACE}/log/messages && exit -1; fi
    - name: Stop Analysis UC
      run: PROJECT_PATH=${GITHUB_WORKSPACE}/MRUVocabulary docker compose -f compose-analysis.yaml stop -t 30
    - name: Check filesystem API artefacts
      run: ARTEFACTS=`find ${GITHUB_WORKSPACE}/api/ -regex ".*\(GET\|PUT\|POST\)/\(result.*\|exec\)"` && if [ "${ARTEFACTS}" != "" ]; then echo "${ARTEFACTS}" && cat ${GITHUB_WORKSPACE}/log/messages && exit -1; fi
    - name: Restart Analysis UC attempt 1
      run: PROJECT_PATH=${GITHUB_WORKSPACE}/MRUVocabulary docker compose -f compose-analysis.yaml up -d
    - name: Restart Integrational Tests on running Analysis UC attempt 1
      run: sleep 5 && docker compose -f compose-analysis.integrational-test.yaml up --abort-on-container-exit --exit-code-from test_aggregator && if [ $? != 0 ]; then cat ${GITHUB_WORKSPACE}/log/messages && exit -1; fi
    - name: Stop Analysis UC attempt 1
      run: PROJECT_PATH=${GITHUB_WORKSPACE}/MRUVocabulary docker compose -f compose-analysis.yaml stop -t 30
    - name: Check filesystem API artefacts attempt 1
      run: ARTEFACTS=`find ${GITHUB_WORKSPACE}/api/ -regex ".*\(GET\|PUT\|POST\)/\(result.*\|exec\)"` && if [ "${ARTEFACTS}" != "" ]; then echo "${ARTEFACTS}" && cat ${GITHUB_WORKSPACE}/log/messages &&  exit -1; fi
    - name: Restart Analysis UC attempt 2
      run: PROJECT_PATH=${GITHUB_WORKSPACE}/MRUVocabulary docker compose -f compose-analysis.yaml up -d
    - name: Restart Integrational Tests on running Analysis UC attempt 2
      run: sleep 5 && docker compose -f compose-analysis.integrational-test.yaml up --abort-on-container-exit --exit-code-from test_aggregator && if [ $? != 0 ]; then cat ${GITHUB_WORKSPACE}/log/messages && exit -1; fi
    - name: Stop Analysis UC attempt 2
      run: PROJECT_PATH=${GITHUB_WORKSPACE}/MRUVocabulary docker compose -f compose-analysis.yaml stop -t 30
    - name: Check filesystem API artefacts attempt 2
      run: ARTEFACTS=`find ${GITHUB_WORKSPACE}/api/ -regex ".*\(GET\|PUT\|POST\)/\(result.*\|exec\)"` && if [ "${ARTEFACTS}" != "" ]; then echo "${ARTEFACTS}" && cat ${GITHUB_WORKSPACE}/log/messages && exit -1; fi

  analysis_use-case_http_decoupled:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
    - name: Create Shared network
      run: docker network create -d bridge api.pmccabe_collector.network
    - name: Prepare shared volume for SYSLOG-NG
      run: mkdir -p ${GITHUB_WORKSPACE}/log && chmod 777 ${GITHUB_WORKSPACE}/log && docker volume create -d local -o type=none -o device=${GITHUB_WORKSPACE}/log -o o=bind api.pmccabe_collector.logger.org
    - name: Clone external C/C++ project
      run: git clone https://github.com/SergeyIvanov87/MRUVocabulary.git $GITHUB_WORKSPACE/MRUVocabulary
    - name: Tryout syslog-ng
      run: docker compose -f common/images/syslog-ng_image/compose.yaml up -d
    - name: Start Analysis UC
      run: PROJECT_PATH=${GITHUB_WORKSPACE}/MRUVocabulary docker compose -f compose-analysis-http-api.yaml up -d
    - name: Stop Analysis UC
      run: PROJECT_PATH=${GITHUB_WORKSPACE}/MRUVocabulary docker compose -f compose-analysis-http-api.yaml stop
    - name: Restart Analysis UC attempt 1
      run: PROJECT_PATH=${GITHUB_WORKSPACE}/MRUVocabulary docker compose -f compose-analysis-http-api.yaml up -d
    - name: Stop Analysis UC attempt 1
      run: PROJECT_PATH=${GITHUB_WORKSPACE}/MRUVocabulary docker compose -f compose-analysis-http-api.yaml stop
    - name: Restart Analysis UC attempt 2
      run: PROJECT_PATH=${GITHUB_WORKSPACE}/MRUVocabulary docker compose -f compose-analysis-http-api.yaml up -d
    - name: Stop Analysis UC attempt 2
      run: PROJECT_PATH=${GITHUB_WORKSPACE}/MRUVocabulary docker compose -f compose-analysis-http-api.yaml stop

  analytic_use-case:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
    - name: Create API volume
      run: mkdir -p ${GITHUB_WORKSPACE}/api && chmod 777 ${GITHUB_WORKSPACE}/api && docker volume create -d local -o type=none -o device=${GITHUB_WORKSPACE}/api -o o=bind api.pmccabe_collector.restapi.org
    - name: Prepare shared volume for SYSLOG-NG
      run: mkdir -p ${GITHUB_WORKSPACE}/log && chmod 777 ${GITHUB_WORKSPACE}/log && docker volume create -d local -o type=none -o device=${GITHUB_WORKSPACE}/log -o o=bind api.pmccabe_collector.logger.org
    - name: Create Shared network
      run: docker network create -d bridge api.pmccabe_collector.network
    - name: Create RRD snapshots volume
      run: LOCAL_HOST_RRD_SHAPSHOT_MOUNT_POINT=${GITHUB_WORKSPACE}/rrd_snapshots && mkdir -p ${LOCAL_HOST_RRD_SHAPSHOT_MOUNT_POINT} && chmod 777 ${LOCAL_HOST_RRD_SHAPSHOT_MOUNT_POINT} && docker volume create -d local -o type=none -o device=${LOCAL_HOST_RRD_SHAPSHOT_MOUNT_POINT} -o o=bind api.pmccabe_collector.rrd_analytic
    - name: Tryout syslog-ng
      run: docker compose -f common/images/syslog-ng_image/compose.yaml up -d
    - name: Start Analytic UC
      run: PROJECT_URL=https://github.com/SergeyIvanov87/MRUVocabulary.git PROJECT_BRANCH=main docker compose -f compose-analytic.yaml up -d
    - name: Start Integrational Tests on running Analytic UC
      run: sleep 5 && docker compose -f compose-analysis.integrational-test.yaml up --abort-on-container-exit --exit-code-from test_aggregator && if [ $? != 0 ]; then cat ${GITHUB_WORKSPACE}/log/messages && exit -1; fi
    - name: Stop Analytic UC attempt
      run: PROJECT_URL=https://github.com/SergeyIvanov87/MRUVocabulary.git PROJECT_BRANCH=main docker compose -f compose-analytic.yaml stop -t 30
    - name: Check filesystem API artefacts
      run: ARTEFACTS=`find ${GITHUB_WORKSPACE}/api/ -regex ".*\(GET\|PUT\|POST\)/\(result.*\|exec\)"` && if [ "${ARTEFACTS}" != "" ]; then echo "${ARTEFACTS}" && cat ${GITHUB_WORKSPACE}/log/messages && exit -1; fi

  analytic_use-case_http_decoupled:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
    - name: Prepare shared volume for SYSLOG-NG
      run: mkdir -p ${GITHUB_WORKSPACE}/log && chmod 777 ${GITHUB_WORKSPACE}/log && docker volume create -d local -o type=none -o device=${GITHUB_WORKSPACE}/log -o o=bind api.pmccabe_collector.logger.org
    - name: Create Shared network
      run: docker network create -d bridge api.pmccabe_collector.network
    - name: Create RRD snapshots volume
      run: LOCAL_HOST_RRD_SHAPSHOT_MOUNT_POINT=${GITHUB_WORKSPACE}/rrd_snapshots && mkdir -p ${LOCAL_HOST_RRD_SHAPSHOT_MOUNT_POINT} && chmod 777 ${LOCAL_HOST_RRD_SHAPSHOT_MOUNT_POINT} && docker volume create -d local -o type=none -o device=${LOCAL_HOST_RRD_SHAPSHOT_MOUNT_POINT} -o o=bind api.pmccabe_collector.rrd_analytic
    - name: Start Analytic UC
      run: PROJECT_URL=https://github.com/SergeyIvanov87/MRUVocabulary.git PROJECT_BRANCH=main docker compose -f compose-analytic-http-api.yaml up -d
    - name: Start Integrational Tests on running Analytic UC
      run: sleep 5 && docker compose -f compose-analytic-http-api-integrational-test.yaml up --abort-on-container-exit --exit-code-from test_aggregator && if [ $? != 0 ]; then cat ${GITHUB_WORKSPACE}/log/messages && exit -1; fi
    - name: Stop Analytic UC attempt
      run: PROJECT_URL=https://github.com/SergeyIvanov87/MRUVocabulary.git PROJECT_BRANCH=main docker compose -f compose-analytic-http-api.yaml stop
